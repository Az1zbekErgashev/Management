// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagement.Infrastructure.Contexts;

#nullable disable

namespace ProjectManagement.Api.Migrations
{
    [DbContext(typeof(ProjectManagementDB))]
    [Migration("20250306130443_EDIT_CREATED_AT")]
    partial class EDIT_CREATED_AT
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Attachment.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Certificates.Certificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompaniesId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("IssuedByUser")
                        .HasColumnType("integer");

                    b.Property<int>("IssuerToCompanies")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CompaniesId");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Companies.Companies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyCode = "WISESTONET",
                            CompanyName = "WISESTONE T",
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(7823),
                            IsDeleted = 0,
                            Location = "South Korea"
                        },
                        new
                        {
                            Id = 2,
                            CompanyCode = "WISESTONEU",
                            CompanyName = "WISESTONE U",
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(7850),
                            IsDeleted = 0,
                            Location = "Uzbekistan"
                        },
                        new
                        {
                            Id = 3,
                            CompanyCode = "WISESTONE",
                            CompanyName = "WISESTONE",
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(7851),
                            IsDeleted = 0,
                            Location = "South Korea"
                        });
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Logs.Logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Ip")
                        .HasColumnType("bigint");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Partners.Partners", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("Name");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Projects.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedCompanyId")
                        .HasColumnType("integer");

                    b.Property<int?>("CertificateId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("PartnerId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedCompanyId");

                    b.HasIndex("PartnerId");

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("IssuesFound")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("TotalHourse")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Status");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<TimeSpan>("SpentTime")
                        .HasColumnType("interval");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskReports");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskReportPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttachmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("TaskReportId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TaskReportId");

                    b.ToTable("TaskReportPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Teams.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedCompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AssignedCompanyId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(7967),
                            IsDeleted = 0,
                            Location = "UZB"
                        });
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Teams.TeamMember", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            TeamId = 1,
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(8015),
                            Id = 1,
                            IsCurrent = true,
                            IsDeleted = 0,
                            Role = 4
                        });
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.User.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TeamMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Email");

                    b.HasIndex("Name");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            CreatedAt = new DateTime(2025, 3, 6, 13, 4, 42, 698, DateTimeKind.Utc).AddTicks(7964),
                            Email = "admin@gmail.com",
                            IsDeleted = 0,
                            Name = "Admin",
                            Password = "web123$",
                            PhoneNumber = "998881422030",
                            Surname = "System",
                            TeamMemberId = 1
                        });
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Certificates.Certificates", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Companies.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Attachment.Attachment", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("ProjectManagement.Domain.Entities.Projects.Project", "Project")
                        .WithOne("Certificates")
                        .HasForeignKey("ProjectManagement.Domain.Entities.Certificates.Certificates", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Companies");

                    b.Navigation("Image");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Logs.Logs", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Partners.Partners", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Attachment.Attachment", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Projects.Project", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Companies.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("AssignedCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Partners.Partners", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Teams.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Companies");

                    b.Navigation("Partner");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.Task", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Projects.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Teams.Team", "Team")
                        .WithMany("Task")
                        .HasForeignKey("TeamId");

                    b.Navigation("Project");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskPhotos", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Attachment.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Task.Task", "Task")
                        .WithMany("TaskPhotos")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskReport", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Task.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.User.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskReportPhotos", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Attachment.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.Task.TaskReport", "TaskReport")
                        .WithMany("TaskReportPhotos")
                        .HasForeignKey("TaskReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("TaskReport");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Teams.Team", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Companies.Companies", "Company")
                        .WithMany("Teams")
                        .HasForeignKey("AssignedCompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Teams.TeamMember", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Teams.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagement.Domain.Entities.User.User", "User")
                        .WithOne("TeamMembers")
                        .HasForeignKey("ProjectManagement.Domain.Entities.Teams.TeamMember", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.User.User", b =>
                {
                    b.HasOne("ProjectManagement.Domain.Entities.Companies.Companies", "Companies")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Companies");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Companies.Companies", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Projects.Project", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.Task", b =>
                {
                    b.Navigation("TaskPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Task.TaskReport", b =>
                {
                    b.Navigation("TaskReportPhotos");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.Teams.Team", b =>
                {
                    b.Navigation("Task");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("ProjectManagement.Domain.Entities.User.User", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
